unit uMain;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.Grids,
  Vcl.Samples.Spin, uVisualisation, Math, ListUnit;

type

    TPoint = record
      Name: Byte;
      X, Y: Integer;
    End;

    DeykstRes = Array of Integer;
    TMatrix = Array of Array of Integer;

  TfrmMain = class(TForm)
    AskLabel: TLabel;
    VerticeEdit: TSpinEdit;
    MatrixLabel: TLabel;
    sgMatrix: TStringGrid;
    eStart: TSpinEdit;
    eFinish: TSpinEdit;
    Label1: TLabel;
    Label2: TLabel;
    btnStart: TButton;
    mRoutes: TMemo;
    lblLong: TLabel;
    lblShort: TLabel;
    lblCenter: TLabel;
    brnDraw: TButton;
    Label3: TLabel;
    procedure VerticeEditChange(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure btnStartClick(Sender: TObject);
    function FindWays: TList;
  private
    { Private declarations }
  public
    { Public declarations }
    Function CreateMatrix(): TMatrix;
  end;

Const
    Infinity = 100000; //Бесконечно большое значение
    Rad= 15;  //Радиус окружности на графе
    ArrowLen = 15; //Длина стрелочки
    ArrowRot= Pi/12; //Угол поворота линий описывающих стрелочку относ. ребра

Var
    frmMain: TfrmMain;
    A: TMatrix; //матрица смежности
    Ways: TList; //список путей
implementation

{$R *.dfm}

procedure TfrmMain.FormCreate(Sender: TObject);
Var
    F: textFile;
    N, I, J, Val: Integer;
begin
    sgMatrix.Cells[1,0] := '  0 ';
    sgMatrix.Cells[0,1] := '  0 ';
    AssignFile(F, 'd.txt');
    Reset(f);
    Readln(F, N);
    For I := 1 to N do
        VerticeEdit.Value := I;
    For i := 1 to N do
    Begin
        For J := 1 to N do
        Begin
            Read(F, Val);
            sgMatrix.Cells[J, I] := IntToStr(Val);
        End;
    End;
end;

//Procedure DrawGraph(Canvas: TCanvas; N: Integer; Matrix: TMatrix; Var PointsArr: TPointsArr);
//Var
//    Alfa: Real;
//    I, J: Integer;
//    CenterX, CenterY: Integer;
//    Str: String;
//    AngleLine: Real;
//    P1, P2: TPoint;
//Const
//    AngleArrowLines = PI / 18;
//    LEN_ARROW = 15;
//
//Begin
//    Alfa := 2*Pi/N;
//    With Canvas do
//    Begin
//        Font.Color := clRed;
//        Font.Size := 12;
//        Font.Style := [fsBold];
//
//        For I := 0 to (N - 1) do
//        Begin
//            CenterX := Round(AreaRadius * Sin(Alfa * I)) + StartX;
//            CenterY := Round(AreaRadius * Cos(Alfa * I)) + StartY;
//            PointsArr[I].CenterX := CenterX;
//            PointsArr[I].CenterY := CenterY;
//            PointsArr[I].SinAlfa := Alfa * I;
//            PointsArr[I].CosAlfa := Alfa * I;
//        End;
//
//        Pen.Color := clGreen;
//        Pen.Width := 3;
//        For I := 0 to (N -1) do
//        Begin
//            For J := 0 to (N - 1) do
//            Begin
//                P1 := PointsArr[I];
//                P2 := PointsArr[J];
//                If ((Matrix[I, J] <> 0) and (I = J)) then
//                Begin
//                    //Brush.Color := clNone;
//                    //Ellipse(PointsArr[J].CenterX - 40, PointsArr[J].CenterY - 40, PointsArr[J].CenterX, PointsArr[J].CenterY);
//                End
//                Else if ((Matrix[I, J] <> 0) and (I <> J)) then
//                Begin
//                    Brush.Color := clRed;
//                    //MoveTo(PointsArr[I].CenterX, PointsArr[I].CenterY);
//                    //LineTo(PointsArr[J].CenterX, PointsArr[J].CenterY);
//                    AngleLine := ArcTan2((P2.CenterY - P1.CenterY), P2.CenterX - P1.CenterX);
//                    Polygon([Point(Trunc(P2.CenterX + LEN_ARROW * Cos(Pi + AngleLine + AngleArrowLines)),
//                    Trunc(P2.CenterY + Len_ARROW * Sin(Pi + AngleLine + AngleArrowLines))), Point(P2.CenterX, P2.CenterY),
//                    Point(Trunc(P2.CenterX + LEN_ARROW * Cos(Pi + AngleLine - AngleArrowLines)),
//                    Trunc(P2.CenterY + Len_ARROW * Sin(Pi + AngleLine - AngleArrowLines)))]);
//                End;
//            End;
//        End;
//        For I := 0 to (N - 1) do
//        Begin
//            Brush.Color := PointsArr[I].Color;
//            //Ellipse(PointsArr[I].CenterX - NodeRadius div 2,
//             //           PointsArr[I].CenterY - NodeRadius div 2, PointsArr[I].CenterX + NodeRadius div 2,
//             //           PointsArr[I].CenterY + NodeRadius div 2);
//            Str := IntToStr(I + 1);
//            TextOut(PointsArr[I].CenterX - (TextWidth(Str) div 2), PointsArr[I].CenterY - (TextHeight(Str) div 2), Str);
//        End;
//    End;
//
//End;

//Алгоритм Дейкстры
function Deykstra(start:Byte; out Way:DeykstRes) : DeykstRes;
var
  Used: Mn; //Множество посещённых вершин
  i,j,min:integer;
begin
  Used:= [];
  SetLength(Result,High(A)+1); //Размерность результата
  SetLength(Way,High(A)+1);
  for i := 0 to High(Result) do
  begin
    Result[i]:=A[start,i];    //Прямые пути
    Way[i]:=start;
  end;

  for j := 0 to High(A) do    //Текщей должна побывать каждая вершина
  begin
    Used:=Used + [start];
    //Для каждого соседа тек. вершины
    for i := 0 to High(Result) do
      if Not (i in Used) then //Вешина ещё в графе
        if Result[i] > Result[start] + A[start,i] then
        begin
          Result[i] := Result[start] + A[start,i];
          Way[i]:=start;
        end;
    //Сл. вершина  - минимальная ещё принадлежащая  графу
    min:=MaxInt;
    for i := 0 to High(Result) do
      if Not (i in Used) And (Result[i] < min) then
      begin
        min:=Result[i];
        start:=i;
      end;
  end;
end;

//Центр Ор. графа
function GraphCenter (FloidRes:TMatrix):Byte;
var
  MaxWay:array of Integer; //Самый длинный путь из данной вершины
  i,j:Integer;
begin
  SetLength(MaxWay,High(A)+1);
  //Поиск самы длинных маршрутов для каждой вершины
  for i:= 0 to High(A)  do
  begin
    MaxWay[i]:=FloidRes[0,i];
    for j:= 0 to High(A) do
      if MaxWay[i] < FloidRes[j,i] then
        MaxWay[i]:= FloidRes[j,i];
  end;

  //Наимньший из ниабольших путей
  Result:=0;
  for i := 0 to High(A) do
    if MaxWay[i] < MaxWay[Result] then
      Result:=i;
end;

//Алгоритм Флойда
function Floid:TMatrix;
var
  i,j,k:Integer;
begin
  SetLength(Result,High(A)+1,High(A)+1);
  //Начальные зачения из матрицы цен
  for i:= 0 to High(A) do
    for j:= 0 to High(A) do
      Result[i,j]:=A[i,j];

  //Сам алгоритм
  for k:=0 to High(A) do
    for i:= 0 to High(A) do
      for j := 0 to High(A) do
        if Result[i,k] + Result[k,j] < Result[i,j] then
          Result[i,j]:= Result[i,k] + Result[k,j];
end;

procedure TfrmMain.btnStartClick(Sender: TObject);
var
  i,j:integer;
  Rez:Integer;
  Code:Integer;
  x,Ways:TList;
  ShortWay,Way:DeykstRes;
  WayName:string;
  Center:Byte;
begin
    A := CreateMatrix();
    //Все пути
    Ways:=FindWays;

    //Вывод путей
    x:=Ways^.Next;
    while x<> nil do
    begin
      mRoutes.Lines.Add( IntToStr(x^.Way.Cost) + ' - ' + x^.Way.Name );
      x:=x^.Next;
    end;

    //Самый длинный путь
  x:=Ways;
  while x^.Next<> nil do
    x:=x^.Next;
  lblLong.Caption:= 'Самый длинный путь: ' + x^.Way.Name + '(' +
                                      IntToStr(x^.Way.Cost) + ')';

  //Находим кратчайший путь ( алгоритм Дейкстры)
  ShortWay:=Deykstra(eStart.Value,Way);
  lblShort.Caption:= 'Самый короткий путь: ';
  //Выводим сам путь
  WayName:=IntToStr(eFinish.Value);
  i:=Way[eFinish.Value];
  while i <> eStart.Value do
  begin
    WayName:=WayName + IntToStr(i);
    i:=Way[i];
  end;
  WayName := WayName + IntToStr(eStart.Value);
  //Разворачиваем строку
    for i:= Length(WayName) downto 1 do
    lblShort.Caption:=lblShort.Caption + WayName[i] + ' ';
  //Бесконечность - пути нет
  lblShort.Caption:=lblShort.Caption +'(' +  IntToStr(ShortWay[eFinish.Value]) + ')' ;

  //Центр графа
  Center:= GraphCenter(Floid);
  lblCenter.Caption:='Центр графа: ' + IntToStr(Center);
end;

Function TfrmMain.CreateMatrix(): TMatrix;
Var
    Matrix: TMatrix;
    N, I, J: Integer;

Begin
    N := VerticeEdit.Value;
    SetLength(Matrix, N, N);
    For I := 0 to (N - 1) do
        For J := 0 to (N - 1) do
        Begin
            Matrix[I, J] := StrToInt(sgMatrix.Cells[J + 1, I + 1]);
            If (Matrix[I][J] = 0) then
            Begin
                Matrix[I][J] := Infinity;
            End;
        End;
    Result := Matrix;
End;

procedure TfrmMain.VerticeEditChange(Sender: TObject);
begin
    sgMatrix.RowCount := VerticeEdit.Value + 1;
    sgMatrix.ColCount := VerticeEdit.Value + 1;
    sgMatrix.Cells[VerticeEdit.Value,0] := '  ' + IntToStr(VerticeEdit.Value - 1);
    sgMatrix.Cells[0,VerticeEdit.Value] := '  ' + IntToStr(VerticeEdit.Value - 1);
end;


//Посик путей между вершинами
function TfrmMain.FindWays:TList;
var
  Src, Dest: Integer;
  NullWay:TWay;

  procedure FindRoute(V: Integer; Way:TWay);
  var
    i: Integer;
    NewWay:TWay;
  begin
    if V = Dest then                   //Нашли
      AddToSortedList(Way,Ways)
    else
    for i := 0 to High(A[V]) do     //Для каждой вершины
      if (A[V, i] <> Infinity) and Not( i in Way.Used) then        //Туда есть переход и там ещё не были
      begin
        NewWay.Used:= Way.Used + [i];
        NewWay.Name:= Way.Name + IntToStr(i) + ' ';
        NewWay.Cost:=Way.Cost + A[V,i];
        FindRoute(i,NewWay);
      end;
  end;

begin
    Ways:=NewList;
    mRoutes.Clear;
    Src := eStart.Value; //Вершина - источник
    Dest := eFinish.Value;//Вершина приемник
    with NullWay do
    begin
      Name:= IntToStr(Src) + ' ';
      Cost:=0;
      Used:= [Src];
    end;
    FindRoute(Src,NullWay);
    Result:=Ways;
end;


end.
